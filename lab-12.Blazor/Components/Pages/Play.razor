@page "/play"
@inject NavigationManager navManager
@using TheGame
@using lab_12.Library

<style>
   h4 {
      margin-top: 0px;
   }
   .column {
      display: inline-block;
      vertical-align: top;
      min-width: 15%;
      max-width: 33%;
      border-width: 2px;
      border-radius: 10px;
      border-style: solid;
      padding: 10px;
   }
</style>   

@if (me is null)
{
   <div>There is no player @PlayerName</div>
}
else if(game.IsGameOver)
{
   <h3>Game Over</h3>
}
else //we're playing
{
   <h3>Play for @me.Name</h3>    
}   

 <div class="column">
     <h4>My Tiles</h4>
     @foreach (var tile in me.Tiles)
     {
         <p @onclick=@(()=>playTile(tile))>(@tile.Num1, @tile.Num2)</p>
     }
 </div>
 <div class="column">
     <h4>Game Board</h4>
     @foreach (var tile in game.Board)
     {
         <p>(@tile.Num1, @tile.Num2)</p>
     }
 </div>
 <div class="column">
     @if (other is null)
     {
         <h4>Waiting for another player...</h4>
     }
     else
     {
         <h4>@other.Name's Tiles</h4>
         foreach (var tile in other.Tiles)
         {
             <p>(X, X)</p>
         }
     }
 </div>

@code
{
 Game game = Game.Instance;
 Player? me;
 Player? other;
 List<string> errors = new();

 [SupplyParameterFromQuery]      //Note(1) - Comes from the query string (url)
 public string PlayerName { get; set; }

 protected override void OnParametersSet()   //Note(2) 
 {
     if(game.PlayerOne?.Name == PlayerName)
     {
         me = game.PlayerOne;
     }
     else if(game.PlayerTwo?.Name == PlayerName)
     {
         me = game.PlayerTwo;
     }
     other = game.PlayerOne == me ? game.PlayerTwo : game.PlayerOne;
     errors.Clear();
 }      
  void playTile(Tile t)
 {
     try
     {
         game.PlayTile(me, t);
     }
     catch (InvalidMoveException)
     {
         errors.Add($"You cannot play {t} on {game.Board.Last()}");
     }
 }   
  protected override void OnInitialized()
 {
     game.GameStateChanged += handleGameStateChanged;
 }

 void handleGameStateChanged()
 {
   if (other is null)
   {
         other = game.PlayerOne == me ? game.PlayerTwo : game.PlayerOne;
   }
   InvokeAsync(StateHasChanged);
 }  
}