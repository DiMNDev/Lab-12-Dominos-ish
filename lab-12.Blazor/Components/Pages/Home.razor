@page "/"
@using Lobby
@inject NavigationManager navManager

<PageTitle>Dominos(ish) Lobby</PageTitle>

<h1>Dominos(ish) Lobby</h1>
@if (Lobby.OpenGameNames.Any())
{
    <h3>Choose an open game to join</h3>
    <ul>
        @foreach (var name in Lobby.OpenGameNames)
        {
            var game = Lobby.GetGame(name);
            var players = $"{game.PlayerOne?.Name ?? "[Open]"} vs {game.PlayerTwo?.Name ?? "[Open]"}";
            <li>
               <a href="/game/@name/">@name (@players)</a>
            </li>
        }
    </ul>
}

<h3>Create a new game</h3>
<input @bind=newGameName /><button @onclick=createGame>Create Game</button>

@if(Lobby.ActiveGames.Any())
{
    <h3>Active Games</h3>
    <table style="width: 100%;" border>
        <thead>
            <tr>
                <th></th>
                <th colspan="2">Player 1</th>
                <th colspan="2">Player 2</th>
            </tr>
            <tr>
                <th>Game Name</th>
                <th>Name</th>
                <th>Tiles</th>
                <th>Name</th>
                <th>Tiles</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var activeGame in Lobby.ActiveGames)
            {
                <tr>
                    <td>@activeGame.Name</td>
                    <td>@activeGame.Game.PlayerOne?.Name</td>
                    <td>@activeGame.Game.PlayerOne?.Tiles.Count</td>
                    <td>@activeGame.Game.PlayerTwo?.Name</td>
                    <td>@activeGame.Game.PlayerTwo?.Tiles.Count</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    string newGameName;
    void createGame()
    {
        var result = Lobby.CreateGame(newGameName);
        newGameName = null;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        Lobby.LobbyChanged += () => InvokeAsync(StateHasChanged);
    }
}